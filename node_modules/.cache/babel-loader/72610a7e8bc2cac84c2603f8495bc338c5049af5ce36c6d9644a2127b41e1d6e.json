{"ast":null,"code":"'use strict';\n\nvar debug = require('debug')('express-http-proxy');\nvar isUnset = require('../lib/isUnset');\nfunction resolveBodyEncoding(reqBodyEncoding) {\n  /* For reqBodyEncoding, these is a meaningful difference between null and\n    * undefined.  null should be passed forward as the value of reqBodyEncoding,\n    * and undefined should result in utf-8.\n    */\n  return reqBodyEncoding !== undefined ? reqBodyEncoding : 'utf-8';\n}\n\n// parse client arguments\n\nfunction resolveOptions(options) {\n  options = options || {};\n  var resolved;\n  if (options.decorateRequest) {\n    throw new Error('decorateRequest is REMOVED; use proxyReqOptDecorator and' + ' proxyReqBodyDecorator instead.  see README.md');\n  }\n  if (options.forwardPath || options.forwardPathAsync) {\n    console.warn('forwardPath and forwardPathAsync are DEPRECATED' + ' and should be replaced with proxyReqPathResolver');\n  }\n  if (options.intercept) {\n    console.warn('DEPRECATED: intercept. Use userResDecorator instead.' + ' Please see README for more information.');\n  }\n  resolved = {\n    limit: options.limit || '1mb',\n    proxyReqPathResolver: options.proxyReqPathResolver || options.forwardPathAsync || options.forwardPath,\n    proxyReqOptDecorator: options.proxyReqOptDecorator,\n    proxyReqBodyDecorator: options.proxyReqBodyDecorator,\n    userResDecorator: options.userResDecorator || options.intercept,\n    userResHeaderDecorator: options.userResHeaderDecorator,\n    proxyErrorHandler: options.proxyErrorHandler,\n    filter: options.filter,\n    // For backwards compatability, we default to legacy behavior for newly added settings.\n\n    parseReqBody: isUnset(options.parseReqBody) ? true : options.parseReqBody,\n    preserveHostHdr: options.preserveHostHdr,\n    memoizeHost: isUnset(options.memoizeHost) ? true : options.memoizeHost,\n    reqBodyEncoding: resolveBodyEncoding(options.reqBodyEncoding),\n    skipToNextHandlerFilter: options.skipToNextHandlerFilter,\n    headers: options.headers,\n    preserveReqSession: options.preserveReqSession,\n    https: options.https,\n    port: options.port,\n    reqAsBuffer: options.reqAsBuffer,\n    timeout: options.timeout\n  };\n\n  // automatically opt into stream mode if no response modifiers are specified\n\n  resolved.stream = !resolved.skipToNextHandlerFilter && !resolved.userResDecorator && !resolved.userResHeaderDecorator;\n  debug(resolved);\n  return resolved;\n}\nmodule.exports = resolveOptions;","map":{"version":3,"names":["debug","require","isUnset","resolveBodyEncoding","reqBodyEncoding","undefined","resolveOptions","options","resolved","decorateRequest","Error","forwardPath","forwardPathAsync","console","warn","intercept","limit","proxyReqPathResolver","proxyReqOptDecorator","proxyReqBodyDecorator","userResDecorator","userResHeaderDecorator","proxyErrorHandler","filter","parseReqBody","preserveHostHdr","memoizeHost","skipToNextHandlerFilter","headers","preserveReqSession","https","port","reqAsBuffer","timeout","stream","module","exports"],"sources":["E:/CLG/Projects/my_portfolio/node_modules/express-http-proxy/lib/resolveOptions.js"],"sourcesContent":["'use strict';\n\nvar debug = require('debug')('express-http-proxy');\n\nvar isUnset = require('../lib/isUnset');\n\nfunction resolveBodyEncoding(reqBodyEncoding) {\n\n  /* For reqBodyEncoding, these is a meaningful difference between null and\n    * undefined.  null should be passed forward as the value of reqBodyEncoding,\n    * and undefined should result in utf-8.\n    */\n  return reqBodyEncoding !== undefined ? reqBodyEncoding : 'utf-8';\n}\n\n// parse client arguments\n\nfunction resolveOptions(options) {\n  options = options || {};\n  var resolved;\n\n  if (options.decorateRequest) {\n    throw new Error(\n      'decorateRequest is REMOVED; use proxyReqOptDecorator and' +\n      ' proxyReqBodyDecorator instead.  see README.md'\n    );\n  }\n\n  if (options.forwardPath || options.forwardPathAsync) {\n    console.warn(\n      'forwardPath and forwardPathAsync are DEPRECATED' +\n      ' and should be replaced with proxyReqPathResolver'\n    );\n  }\n\n  if (options.intercept) {\n    console.warn(\n      'DEPRECATED: intercept. Use userResDecorator instead.' +\n      ' Please see README for more information.'\n    );\n  }\n\n  resolved = {\n    limit: options.limit || '1mb',\n    proxyReqPathResolver: options.proxyReqPathResolver\n        || options.forwardPathAsync\n        || options.forwardPath,\n    proxyReqOptDecorator: options.proxyReqOptDecorator,\n    proxyReqBodyDecorator: options.proxyReqBodyDecorator,\n    userResDecorator: options.userResDecorator || options.intercept,\n    userResHeaderDecorator: options.userResHeaderDecorator,\n    proxyErrorHandler: options.proxyErrorHandler,\n    filter: options.filter,\n    // For backwards compatability, we default to legacy behavior for newly added settings.\n\n    parseReqBody: isUnset(options.parseReqBody) ? true : options.parseReqBody,\n    preserveHostHdr: options.preserveHostHdr,\n    memoizeHost: isUnset(options.memoizeHost) ? true : options.memoizeHost,\n    reqBodyEncoding: resolveBodyEncoding(options.reqBodyEncoding),\n    skipToNextHandlerFilter: options.skipToNextHandlerFilter,\n    headers: options.headers,\n    preserveReqSession: options.preserveReqSession,\n    https: options.https,\n    port: options.port,\n    reqAsBuffer: options.reqAsBuffer,\n    timeout: options.timeout\n  };\n\n  // automatically opt into stream mode if no response modifiers are specified\n\n  resolved.stream = !resolved.skipToNextHandlerFilter &&\n                    !resolved.userResDecorator &&\n                    !resolved.userResHeaderDecorator;\n\n  debug(resolved);\n  return resolved;\n}\n\nmodule.exports = resolveOptions;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;AAElD,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAEvC,SAASE,mBAAmBA,CAACC,eAAe,EAAE;EAE5C;AACF;AACA;AACA;EACE,OAAOA,eAAe,KAAKC,SAAS,GAAGD,eAAe,GAAG,OAAO;AAClE;;AAEA;;AAEA,SAASE,cAAcA,CAACC,OAAO,EAAE;EAC/BA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAIC,QAAQ;EAEZ,IAAID,OAAO,CAACE,eAAe,EAAE;IAC3B,MAAM,IAAIC,KAAK,CACb,0DAA0D,GAC1D,gDACF,CAAC;EACH;EAEA,IAAIH,OAAO,CAACI,WAAW,IAAIJ,OAAO,CAACK,gBAAgB,EAAE;IACnDC,OAAO,CAACC,IAAI,CACV,iDAAiD,GACjD,mDACF,CAAC;EACH;EAEA,IAAIP,OAAO,CAACQ,SAAS,EAAE;IACrBF,OAAO,CAACC,IAAI,CACV,sDAAsD,GACtD,0CACF,CAAC;EACH;EAEAN,QAAQ,GAAG;IACTQ,KAAK,EAAET,OAAO,CAACS,KAAK,IAAI,KAAK;IAC7BC,oBAAoB,EAAEV,OAAO,CAACU,oBAAoB,IAC3CV,OAAO,CAACK,gBAAgB,IACxBL,OAAO,CAACI,WAAW;IAC1BO,oBAAoB,EAAEX,OAAO,CAACW,oBAAoB;IAClDC,qBAAqB,EAAEZ,OAAO,CAACY,qBAAqB;IACpDC,gBAAgB,EAAEb,OAAO,CAACa,gBAAgB,IAAIb,OAAO,CAACQ,SAAS;IAC/DM,sBAAsB,EAAEd,OAAO,CAACc,sBAAsB;IACtDC,iBAAiB,EAAEf,OAAO,CAACe,iBAAiB;IAC5CC,MAAM,EAAEhB,OAAO,CAACgB,MAAM;IACtB;;IAEAC,YAAY,EAAEtB,OAAO,CAACK,OAAO,CAACiB,YAAY,CAAC,GAAG,IAAI,GAAGjB,OAAO,CAACiB,YAAY;IACzEC,eAAe,EAAElB,OAAO,CAACkB,eAAe;IACxCC,WAAW,EAAExB,OAAO,CAACK,OAAO,CAACmB,WAAW,CAAC,GAAG,IAAI,GAAGnB,OAAO,CAACmB,WAAW;IACtEtB,eAAe,EAAED,mBAAmB,CAACI,OAAO,CAACH,eAAe,CAAC;IAC7DuB,uBAAuB,EAAEpB,OAAO,CAACoB,uBAAuB;IACxDC,OAAO,EAAErB,OAAO,CAACqB,OAAO;IACxBC,kBAAkB,EAAEtB,OAAO,CAACsB,kBAAkB;IAC9CC,KAAK,EAAEvB,OAAO,CAACuB,KAAK;IACpBC,IAAI,EAAExB,OAAO,CAACwB,IAAI;IAClBC,WAAW,EAAEzB,OAAO,CAACyB,WAAW;IAChCC,OAAO,EAAE1B,OAAO,CAAC0B;EACnB,CAAC;;EAED;;EAEAzB,QAAQ,CAAC0B,MAAM,GAAG,CAAC1B,QAAQ,CAACmB,uBAAuB,IACjC,CAACnB,QAAQ,CAACY,gBAAgB,IAC1B,CAACZ,QAAQ,CAACa,sBAAsB;EAElDrB,KAAK,CAACQ,QAAQ,CAAC;EACf,OAAOA,QAAQ;AACjB;AAEA2B,MAAM,CAACC,OAAO,GAAG9B,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}