{"ast":null,"code":"'use strict';\n\nvar http = require('http');\nvar https = require('https');\nvar url = require('url');\nvar getRawBody = require('raw-body');\nvar isUnset = require('./isUnset');\nfunction extend(obj, source, skips) {\n  if (!source) {\n    return obj;\n  }\n  for (var prop in source) {\n    if (!skips || skips.indexOf(prop) === -1) {\n      obj[prop] = source[prop];\n    }\n  }\n  return obj;\n}\nfunction parseHost(Container) {\n  var host = Container.params.host;\n  var req = Container.user.req;\n  var options = Container.options;\n  host = typeof host === 'function' ? host(req) : host.toString();\n  if (!host) {\n    return new Error('Empty host parameter');\n  }\n  if (!/http(s)?:\\/\\//.test(host)) {\n    host = 'http://' + host;\n  }\n  var parsed = url.parse(host);\n  if (!parsed.hostname) {\n    return new Error('Unable to parse hostname, possibly missing protocol://?');\n  }\n  var ishttps = options.https || parsed.protocol === 'https:';\n  return {\n    host: parsed.hostname,\n    port: parsed.port || (ishttps ? 443 : 80),\n    module: ishttps ? https : http\n  };\n}\nfunction reqHeaders(req, options) {\n  var headers = options.headers || {};\n  var skipHdrs = ['connection', 'content-length'];\n  if (!options.preserveHostHdr) {\n    skipHdrs.push('host');\n  }\n  var hds = extend(headers, req.headers, skipHdrs);\n  hds.connection = 'close';\n  return hds;\n}\nfunction createRequestOptions(req, res, options) {\n  // prepare proxyRequest\n\n  var reqOpt = {\n    headers: reqHeaders(req, options),\n    method: req.method,\n    path: req.path,\n    params: req.params\n  };\n  if (options.preserveReqSession) {\n    reqOpt.session = req.session;\n  }\n  return Promise.resolve(reqOpt);\n}\n\n// extract to bodyContent object\n\nfunction bodyContent(req, res, options) {\n  var parseReqBody = isUnset(options.parseReqBody) ? true : options.parseReqBody;\n  function maybeParseBody(req, limit) {\n    if (req.body) {\n      return Promise.resolve(req.body);\n    } else {\n      // Returns a promise if no callback specified and global Promise exists.\n\n      return getRawBody(req, {\n        length: req.headers['content-length'],\n        limit: limit\n      });\n    }\n  }\n  if (parseReqBody) {\n    return maybeParseBody(req, options.limit);\n  }\n}\nmodule.exports = {\n  create: createRequestOptions,\n  bodyContent: bodyContent,\n  parseHost: parseHost\n};","map":{"version":3,"names":["http","require","https","url","getRawBody","isUnset","extend","obj","source","skips","prop","indexOf","parseHost","Container","host","params","req","user","options","toString","Error","test","parsed","parse","hostname","ishttps","protocol","port","module","reqHeaders","headers","skipHdrs","preserveHostHdr","push","hds","connection","createRequestOptions","res","reqOpt","method","path","preserveReqSession","session","Promise","resolve","bodyContent","parseReqBody","maybeParseBody","limit","body","length","exports","create"],"sources":["E:/CLG/Projects/my_portfolio/node_modules/express-http-proxy/lib/requestOptions.js"],"sourcesContent":["'use strict';\nvar http = require('http');\nvar https = require('https');\nvar url = require('url');\nvar getRawBody = require('raw-body');\nvar isUnset = require('./isUnset');\n\nfunction extend(obj, source, skips) {\n\n  if (!source) {\n    return obj;\n  }\n\n  for (var prop in source) {\n    if (!skips || skips.indexOf(prop) === -1) {\n      obj[prop] = source[prop];\n    }\n  }\n\n  return obj;\n}\n\nfunction parseHost(Container) {\n  var host = Container.params.host;\n  var req =  Container.user.req;\n  var options = Container.options;\n  host = (typeof host === 'function') ? host(req) : host.toString();\n\n  if (!host) {\n    return new Error('Empty host parameter');\n  }\n\n  if (!/http(s)?:\\/\\//.test(host)) {\n    host = 'http://' + host;\n  }\n\n  var parsed = url.parse(host);\n\n  if (!parsed.hostname) {\n    return new Error('Unable to parse hostname, possibly missing protocol://?');\n  }\n\n  var ishttps = options.https || parsed.protocol === 'https:';\n\n  return {\n    host: parsed.hostname,\n    port: parsed.port || (ishttps ? 443 : 80),\n    module: ishttps ? https : http,\n  };\n}\n\nfunction reqHeaders(req, options) {\n\n\n  var headers = options.headers || {};\n\n  var skipHdrs = [ 'connection', 'content-length' ];\n  if (!options.preserveHostHdr) {\n    skipHdrs.push('host');\n  }\n  var hds = extend(headers, req.headers, skipHdrs);\n  hds.connection = 'close';\n\n  return hds;\n}\n\nfunction createRequestOptions(req, res, options) {\n\n  // prepare proxyRequest\n\n  var reqOpt = {\n    headers: reqHeaders(req, options),\n    method: req.method,\n    path: req.path,\n    params: req.params,\n  };\n\n  if (options.preserveReqSession) {\n    reqOpt.session = req.session;\n  }\n\n  return Promise.resolve(reqOpt);\n}\n\n// extract to bodyContent object\n\nfunction bodyContent(req, res, options) {\n  var parseReqBody = isUnset(options.parseReqBody) ? true : options.parseReqBody;\n\n  function maybeParseBody(req, limit) {\n    if (req.body) {\n      return Promise.resolve(req.body);\n    } else {\n      // Returns a promise if no callback specified and global Promise exists.\n\n      return getRawBody(req, {\n        length: req.headers['content-length'],\n        limit: limit,\n      });\n    }\n  }\n\n  if (parseReqBody) {\n    return maybeParseBody(req, options.limit);\n  }\n}\n\n\nmodule.exports = {\n  create: createRequestOptions,\n  bodyContent: bodyContent,\n  parseHost: parseHost\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}